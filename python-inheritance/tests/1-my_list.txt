The ``MyList`` module
======================

Using ``MyList``
----------------

This is a doctest file for the MyList class that inherits from list.

First import the class:

    >>> MyList = __import__('1-my_list').MyList

Test instantiation:

    >>> my_list = MyList()
    >>> print(type(my_list))
    <class '1-my_list.MyList'>

Test that it inherits from list:

    >>> print(isinstance(my_list, list))
    True

Test __str__ method (inherited from list):

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

Test append method (inherited from list):

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> print(my_list)
    [1]

Test print_sorted with empty list:

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Test print_sorted with one element:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.print_sorted()
    [1]

Test print_sorted with sorted append:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.print_sorted()
    [1, 2, 3]

Test print_sorted with not sorted append:

    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.print_sorted()
    [1, 2, 3]

Test print_sorted with negative numbers:

    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(3)
    >>> my_list.append(-5)
    >>> my_list.append(0)
    >>> my_list.print_sorted()
    [-5, -1, 0, 3]

Test that print_sorted doesn't modify the original list:

    >>> my_list = MyList([5, 2, 8, 1])
    >>> print(my_list)
    [5, 2, 8, 1]
    >>> my_list.print_sorted()
    [1, 2, 5, 8]
    >>> print(my_list)
    [5, 2, 8, 1]

Test class creation and regular print:

    >>> my_list = MyList()
    >>> print(my_list)
    []

Test class creation, append and regular print:

    >>> my_list = MyList()
    >>> my_list.append(98)
    >>> print(my_list)
    [98]

Test class creation, append, regular print and sorted print:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> print(my_list)
    [1, 4]
    >>> my_list.print_sorted()
    [1, 4]
    >>> print(my_list)
    [1, 4]

Test class creation, multiple appends, regular print and sorted print:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test with duplicate values:

    >>> my_list = MyList([3, 1, 3, 2, 1])
    >>> my_list.print_sorted()
    [1, 1, 2, 3, 3]
    >>> print(my_list)
    [3, 1, 3, 2, 1]

Test print_sorted multiple times:

    >>> my_list = MyList([9, 5, 7])
    >>> my_list.print_sorted()
    [5, 7, 9]
    >>> my_list.print_sorted()
    [5, 7, 9]

Test with large numbers:

    >>> my_list = MyList([1000, 1, 500])
    >>> my_list.print_sorted()
    [1, 500, 1000]

Test concatenation (list feature):

    >>> my_list1 = MyList([3, 1])
    >>> my_list2 = MyList([2, 4])
    >>> my_list3 = my_list1 + my_list2
    >>> print(type(my_list3))
    <class 'list'>
    >>> print(my_list3)
    [3, 1, 2, 4]
