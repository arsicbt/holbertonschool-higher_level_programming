"""
Doctest for matrix_divided function.
"""

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic functionality:
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test case from requirements: [[3]] / 3
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3
[[1.0]]

Test case from requirements: [[3, 9], [12, 15]] / -3
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3
[[-1.0, -3.0], [-4.0, -5.0]]

Test with float divisor:
>>> matrix_divided([[2.5, 5.0], [7.5, 10.0]], 2.5)
[[1.0, 2.0], [3.0, 4.0]]

Test with negative divisor:
>>> matrix_divided([[1, 2], [3, 4]], -2)
[[-0.5, -1.0], [-1.5, -2.0]]

Test with floats in matrix:
>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

Test division by zero - case from requirements:
>>> matrix_divided([[3, 9], [12, 15]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Test division by zero with float:
>>> matrix_divided([[1, 2], [3, 4]], 0.0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

Test different row sizes - case from requirements:
>>> matrix_divided([[3, 9], [12, 15, 3]], 3)
Traceback (most recent call last):
...
TypeError: matrix must have each row with the same size

Test matrix with non-numeric elements - case from requirements:
>>> matrix_divided([[3, "9"], [15, 3]], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix not a list:
>>> matrix_divided("not a list", 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test empty matrix:
>>> matrix_divided([], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with empty row:
>>> matrix_divided([[]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with non-list elements:
>>> matrix_divided([1, 2, 3], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix with mixed types:
>>> matrix_divided([[1, "2"], [3, 4]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Test div not a number (string):
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
...
TypeError: div must be a number

Test div is None:
>>> matrix_divided([[1, 2], [3, 4]], None)
Traceback (most recent call last):
...
TypeError: div must be a number

Test with infinity - all values should be 0.0:
>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

Test matrix with infinity value and integer divisor:
>>> matrix_divided([[float('inf'), 2], [3, 4]], 2)
[[inf, 1.0], [1.5, 2.0]]

Test matrix with infinity and divisor infinity:
>>> matrix_divided([[float('inf'), 2], [3, 4]], float('inf'))
[[nan, 0.0], [0.0, 0.0]]

Test matrix with NaN value:
>>> matrix_divided([[float('nan'), 2], [3, 4]], 2)
[[nan, 1.0], [1.5, 2.0]]

Test matrix with NaN and divisor NaN:
>>> matrix_divided([[1, 2], [3, 4]], float('nan'))
[[nan, nan], [nan, nan]]

Test missing both arguments:
>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Test missing one argument:
>>> matrix_divided([[1, 2]])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

Test very small numbers:
>>> matrix_divided([[0.001, 0.002], [0.003, 0.004]], 1000)
[[0.0, 0.0], [0.0, 0.0]]